import argparse
from app.config import DATABASE_URL
from app.db import get_engine
from langchain_community.utilities import SQLDatabase
from langchain_groq import ChatGroq
from langchain.prompts import ChatPromptTemplate
from langchain.schema import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from sqlalchemy import text
from tabulate import tabulate

SYSTEM = (
    "You are a careful data analyst. Generate ONLY SQL for a {dialect} database. "
    "Never write DDL/DML (no DROP/ALTER/INSERT/UPDATE/DELETE). "
    "Prefer simple SELECTs with GROUP BY/WHERE/LIMIT. "
    "Use table/column names exactly as shown. Return raw SQL only."
)

USER_TMPL = (
    "Question: {question}\n"
    "Schema:\n{schema}\n"
    "Return SQL only."
)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--question",
        required=True,
        help="Natural language question, e.g. 'top 5 products by revenue'",
    )
    args = parser.parse_args()

    # Init DB + schema
    engine = get_engine()
    db = SQLDatabase.from_uri(DATABASE_URL)
    dialect = db._engine.dialect.name

    # Groq LLM (pick one of the supported models)
    llm = ChatGroq(model="llama-3.1-8b-instant", temperature=0.0)

    system = SYSTEM.format(dialect=dialect)
    prompt = ChatPromptTemplate.from_messages([("system", system), ("human", USER_TMPL)])

    chain = (
        {"question": RunnablePassthrough(),
         "schema": lambda q: db.get_table_info()}
        | prompt
        | llm
        | StrOutputParser()
    )

    sql = None
    try:
        sql = chain.invoke(args.question).strip()
        # Clean fences if needed
        if sql.startswith("```"):
            sql = sql.strip("`")
            if sql.lower().startswith("sql"):
                sql = sql[3:].strip()
    except Exception as e:
        print("❌ LLM failed to generate SQL:", e)
        return

    # If SQL was not generated
    if not sql:
        print("❌ No SQL generated by model.")
        return

    # Execute SQL
    try:
        with engine.connect() as conn:
            result = conn.execute(text(sql))
            rows = result.fetchall()
            headers = result.keys()
            print("✅ Generated SQL:\n", sql, "\n")
            print(tabulate(rows, headers=headers, tablefmt="github"))
    except Exception as e:
        print("✅ Generated SQL (but execution failed):\n", sql, "\n")
        print("Execution error:", e)


if __name__ == "__main__":
    main()
